[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\ninstall using:\n    pip install nbdev-cards\nor\n    conda install -c install nbdev-cards",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class you can use to create, display and compare playing cards:\n\nCard(1,3)\n\n3♥\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♠', '♥', '♦', '♣']",
    "crumbs": [
      "nbdev_cards"
    ]
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "Deck\n\n Deck ()\n\nA deck of 52 cards, not included jokers.\nWhen we initially a deck, all of the cards will be present.\n\ndeck=Deck()\ndeck\n\nA♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠; A♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦; A♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs areminder, these are the suits we defined for a Card:\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\n\nCard(1, 1) in deck\n\nTrue\n\n\n\n\n\nDeck.pop\n\n Deck.pop (idx=-1)\n\nRemove one card from the deck.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove , defaulting to the last on\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3, 13)) # K♣\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove one card from the deck.\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffle the cards in this deck.\n\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with trplacement\n\n\n\n\ndraw_n(13, replace=False)\n\nAttributeError: 'Deck' object has no attribute 'shuffle'",
    "crumbs": [
      "deck"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card – A basic playing card",
    "section": "",
    "text": "We will be using numbers to reqpresent playing cards an ranks. These are suits:\nsuits\n\n['♠', '♥', '♦', '♣']\nFor instance the suit at index 0:\nsuits[0]\n\n'♠'\nThese are the ranks:\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\nFor instance the rank at index 1 (note that there isn’t a playing card position 0, since we want the ranks to match the inidces where possible):\nranks[1]\n\n'A'\nsource",
    "crumbs": [
      "card -- A basic playing card"
    ]
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card – A basic playing card",
    "section": "Comparison operators",
    "text": "Comparison operators\nEquality, less than, and greater than work on the rank and suit indices.\nFor instance here’s some tests for equality\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\nAnd a test of &lt; …\n\nassert Card(suit=1, rank=3) &lt; Card(suit=2, rank=3)\n\n… finally if &gt;:\n\nassert Card(suit=3, rank=3) &gt; Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) &gt; Card(suit=2, rank=3)",
    "crumbs": [
      "card -- A basic playing card"
    ]
  }
]