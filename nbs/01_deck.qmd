---
title: deck
jupyter: python3
---

```{python}
#| '0': d
#| '1': e
#| '2': f
#| '3': a
#| '4': u
#| '5': l
#| '6': t
#| '7': _
#| '8': e
#| '9': x
#| '10': p
#| '11': ' '
#| '12': d
#| '13': e
#| '14': c
#| '15': k
```


> A deck of playing cards


```{python}
#| '0': e
#| '1': x
#| '2': p
#| '3': o
#| '4': r
#| '5': t
from nbdev_cards.card import *
from fastcore.utils import *
import random
```

```{python}
#| '0': h
#| '1': i
#| '2': d
#| '3': e
from nbdev.showdoc import *
from fastcore.test import *
```

```{python}
#| '0': e
#| '1': x
#| '2': p
#| '3': o
#| '4': r
#| '5': t
class Deck:
    """A deck of 52 cards, not included jokers."""
    def __init__(self): self.cards=[Card(s,r) for s in range(4) for r in range(1, 14)]
    def __len__(self): return len(self.cards) # len(deck)
    def __str__(self): return '; '.join([str(c) for c in self.cards]) 
    def __contains__(self, card): return card in self.cards # Card(1, 1) in deck

    __repr__=__str__

    def shuffle(self): 
        "Shuffle the cards in this deck."
        random.shuffle(self.cards)
```

When we initially a deck, all of the cards will be present.

```{python}
deck=Deck()
deck
```

That should be 52 cards.

```{python}
test_eq(len(deck), 52)
```

As areminder, these are the suits we defined for a `Card`:

```{python}
suits
```

```{python}
Card(1, 1) in deck
```

```{python}
#| '0': e
#| '1': x
#| '2': p
#| '3': o
#| '4': r
#| '5': t
@patch
def pop(self:Deck, 
        idx=-1 # The index of the card to remove , defaulting to the last on
        ):
        "Remove one card from the deck."
        return self.cards.pop(idx)
```

```{python}
deck = Deck()
test_eq(deck.pop(), Card(3, 13)) # Kâ™£
```

```{python}
#| '0': e
#| '1': x
#| '2': p
#| '3': o
#| '4': r
#| '5': t
@patch
def remove(self:Deck, 
        card:Card # Card to remove
        ):
        "Remove one card from the deck."
        return self.cards.remove(card)
```

```{python}

card23 = Card(2, 3)
deck.remove(card23)

assert card23 not in deck
```

```{python}
show_doc(Deck.shuffle)
```

```{python}
#| '0': e
#| '1': x
#| '2': p
#| '3': o
#| '4': r
#| '5': t
def draw_n(n:int, # number of cards to draw 
           replace:bool=True): # whether or not draw with trplacement
    "Draw `n` cards with replacement iif `replace`"
    d = Deck()
    d.shuffle()
    if replace: return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]
    else: return d.cards[:n]
    
```

```{python}
draw_n(13, replace=False)
```

```{python}
from nbdev.export import nb_export
nb_export('01_deck.ipynb', '../nbdev_cards/')
```


